#!/usr/bin/env node
const BackendlessConsole = require('../libs/backendless-console-api.js');
const chalk = require('chalk');
const checkForArguments = require('../utils/checkArgs');
const commandLineArgs = require('command-line-args');
const getUsage = require('command-line-usage');

const ansi_banner = require('../constants/command-banner');
const optionDefinitions = require('../constants/command-options');
const util = require('util');
const banner = getUsage(ansi_banner);
const options = commandLineArgs(optionDefinitions);
const compareTables = require('../libs/comparator/tables')
const compareTablesPermissions = require('../libs/comparator/tables-permissions')
const compareEndpoints = require('../libs/comparator/endpoints')
const compareEndpointsPermissions = require('../libs/comparator/endpoints-permissions')
const compareAppPermissions = require('../libs/comparator/app-permissions')
const syncManager = require('../libs/sync-manager')

let backendless;

Promise.resolve()
    .then(() => checkForArguments(options.compare))
    .then(() => {
        const {
            'username': username,
            'password': password,
            'application-control': appControl,
            'applications-to-check': appsToCheck,
            'dump-application-control': dumpPath,
            'reporting-directory': reportingDir,
            'backendless-url': beURL,
            'timeout': timeout,
            'verbose': verboseOutput,
            'monitor': monitorMode,
            'sync': syncMode
        } = options.compare;

        !monitorMode && console.log(banner)

        backendless = new BackendlessConsole(username, password, beURL, appControl, appsToCheck, reportingDir, timeout, verboseOutput);

        let apps

        syncMode && syncManager.init(backendless)

        return backendless.getAppMeta()
            .then(() => backendless.getAppDataTables())
            .then(() => backendless.getAppRoles())
            .then(() => backendless.getAppRolePermissions())
//            .then(() => backendless.getAppDataTableUserPermissions())
            .then(() => backendless.getAppDataTableRolePermissions())
            .then(() => backendless.getAppServicesRolePermissions())
            .then(() => apps = backendless.getApps())
            .then(() => dumpPath && BackendlessConsole.saveDataToFile(apps[0], dumpPath, verboseOutput))
            .then(() => compareTables(apps))
            .then(hasDiferences => compareAppPermissions(apps) || hasDiferences)
            .then(hasDiferences => compareTablesPermissions(apps) || hasDiferences)
            .then(hasDiferences => compareEndpoints(apps) || hasDiferences)
            .then(hasDiferences => compareEndpointsPermissions(apps) || hasDiferences)
            .then(hasDiferences => {
                if (hasDiferences && monitorMode) {
                    throw new Error('Differences detected')
                }
            })
            .then(() => syncMode && syncManager.sync(apps))
            .then(() => process.exit(0))
    })

    .catch((err) => {
        console.log(util.inspect(err));
        console.log(chalk.bold.red(err));

        process.exit(1)
    });
